// <auto-generated />

#nullable disable

using BenchmarkingPortal.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace BenchmarkingPortal.Migrations.Base
{
    [DbContext(typeof(BenchmarkingDbContext))]
    [Migration("20230407211048_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Benchmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComputerGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("Cpu")
                        .HasColumnType("int");

                    b.Property<int>("ExecutableId")
                        .HasColumnType("int");

                    b.Property<int>("HardTimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("PropertyFilePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ram")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SetFilePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SourceSetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerGroupId");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("ExecutableId");

                    b.HasIndex("SourceSetId");

                    b.ToTable("Benchmark", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.ComputerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ComputerGroup", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.ConfigurationItem", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key", "Scope", "ConfigurationId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ConfigurationItem", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Constraint", b =>
                {
                    b.Property<string>("Premise")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Consequence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("Premise", "Consequence", "ConfigurationId");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("Constraint", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Executable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerTool")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToolVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Executable", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.SourceSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SourceSet", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ComputerGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Cpu")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Ram")
                        .HasColumnType("int");

                    b.Property<int>("Storage")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ComputerGroupId");

                    b.ToTable("Worker", (string)null);
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Benchmark", b =>
                {
                    b.HasOne("BenchmarkingPortal.Dal.Entities.ComputerGroup", "ComputerGroup")
                        .WithMany("Benchmarks")
                        .HasForeignKey("ComputerGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Benchmark_ComputerGroup");

                    b.HasOne("BenchmarkingPortal.Dal.Entities.Configuration", "Configuration")
                        .WithMany("Benchmarks")
                        .HasForeignKey("ConfigurationId")
                        .IsRequired()
                        .HasConstraintName("FK_Benchmark_Configuration");

                    b.HasOne("BenchmarkingPortal.Dal.Entities.Executable", "Executable")
                        .WithMany("Benchmarks")
                        .HasForeignKey("ExecutableId")
                        .IsRequired()
                        .HasConstraintName("FK_Benchmark_Executable");

                    b.HasOne("BenchmarkingPortal.Dal.Entities.SourceSet", "SourceSet")
                        .WithMany("Benchmarks")
                        .HasForeignKey("SourceSetId")
                        .IsRequired()
                        .HasConstraintName("FK_Benchmark_SourceSet");

                    b.Navigation("ComputerGroup");

                    b.Navigation("Configuration");

                    b.Navigation("Executable");

                    b.Navigation("SourceSet");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.ConfigurationItem", b =>
                {
                    b.HasOne("BenchmarkingPortal.Dal.Entities.Configuration", "Configuration")
                        .WithMany("ConfigurationItems")
                        .HasForeignKey("ConfigurationId")
                        .IsRequired()
                        .HasConstraintName("FK_ConfigurationItem_Configuration");

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Constraint", b =>
                {
                    b.HasOne("BenchmarkingPortal.Dal.Entities.Configuration", "Configuration")
                        .WithMany("Constraints")
                        .HasForeignKey("ConfigurationId")
                        .IsRequired()
                        .HasConstraintName("FK_Constraint_Configuration");

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Worker", b =>
                {
                    b.HasOne("BenchmarkingPortal.Dal.Entities.ComputerGroup", "ComputerGroup")
                        .WithMany("Workers")
                        .HasForeignKey("ComputerGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Worker_ComputerGroup");

                    b.Navigation("ComputerGroup");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.ComputerGroup", b =>
                {
                    b.Navigation("Benchmarks");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Configuration", b =>
                {
                    b.Navigation("Benchmarks");

                    b.Navigation("ConfigurationItems");

                    b.Navigation("Constraints");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.Executable", b =>
                {
                    b.Navigation("Benchmarks");
                });

            modelBuilder.Entity("BenchmarkingPortal.Dal.Entities.SourceSet", b =>
                {
                    b.Navigation("Benchmarks");
                });
#pragma warning restore 612, 618
        }
    }
}
